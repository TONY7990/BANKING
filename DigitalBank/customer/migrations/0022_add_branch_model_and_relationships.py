# Generated by Django 5.1.7 on 2025-03-16 13:39

from django.db import migrations, models
import django.db.models.deletion

def save_existing_branch_names(apps, schema_editor):
    Manager = apps.get_model('customer', 'Manager')
    # Store existing branch names in a temporary field
    for manager in Manager.objects.all():
        if hasattr(manager, 'branch') and manager.branch:  # branch here refers to the old CharField
            manager.temp_branch_name = manager.branch
            manager.save()

def create_branches_and_update_relations(apps, schema_editor):
    Branch = apps.get_model('customer', 'Branch')
    Manager = apps.get_model('customer', 'Manager')
    Customer = apps.get_model('customer', 'Customer')
    LoanOfficer = apps.get_model('customer', 'LoanOfficer')

    # Get all unique branch names from managers
    branch_names = set()
    for manager in Manager.objects.all():
        if hasattr(manager, 'temp_branch_name') and manager.temp_branch_name:
            branch_names.add(manager.temp_branch_name)
    
    # If no existing branches, create default branch
    if not branch_names:
        branch_names.add('Main Branch')

    # Create branches and store mapping
    branch_mapping = {}
    for i, name in enumerate(branch_names):
        branch = Branch.objects.create(
            name=name,
            code=f'BR{str(i+1).zfill(3)}',
            address='123 Main Street',
            city='Mumbai',
            state='Maharashtra',
            pincode='400001',
            phone='+91 1234567890',
            email=f'{name.lower().replace(" ", ".")}@nanowealthbank.com'
        )
        branch_mapping[name] = branch

    # Update managers with their respective branches
    for manager in Manager.objects.all():
        branch_name = getattr(manager, 'temp_branch_name', 'Main Branch')
        branch = branch_mapping.get(branch_name, branch_mapping['Main Branch'])
        manager.new_branch = branch
        manager.save()

    # Update other models with the main branch
    main_branch = branch_mapping.get('Main Branch', list(branch_mapping.values())[0])
    Customer.objects.all().update(branch=main_branch)
    LoanOfficer.objects.all().update(branch=main_branch)

def reverse_branch_migration(apps, schema_editor):
    Branch = apps.get_model('customer', 'Branch')
    Manager = apps.get_model('customer', 'Manager')
    Customer = apps.get_model('customer', 'Customer')
    LoanOfficer = apps.get_model('customer', 'LoanOfficer')
    
    # Restore original branch names from temporary field
    for manager in Manager.objects.all():
        if hasattr(manager, 'temp_branch_name') and manager.temp_branch_name:
            manager.branch = manager.temp_branch_name
            manager.save()
    
    # Clear references
    Customer.objects.all().update(branch=None)
    LoanOfficer.objects.all().update(branch=None)
    
    # Delete all branches
    Branch.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0021_alter_customer_transaction_pin'),
    ]

    operations = [
        # Add temporary field to store existing branch names
        migrations.AddField(
            model_name='manager',
            name='temp_branch_name',
            field=models.CharField(max_length=100, null=True),
        ),
        
        # Save existing branch names
        migrations.RunPython(save_existing_branch_names),
        
        # Create Branch model
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('pincode', models.CharField(max_length=6)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
            },
        ),
        
        # Add new branch field to Manager
        migrations.AddField(
            model_name='manager',
            name='new_branch',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manager', to='customer.branch'),
        ),
        
        # Add branch fields to other models
        migrations.AddField(
            model_name='customer',
            name='branch',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', to='customer.branch'),
        ),
        migrations.AddField(
            model_name='loanofficer',
            name='branch',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loan_officers', to='customer.branch'),
        ),
        
        # Create branches and update relations
        migrations.RunPython(create_branches_and_update_relations, reverse_branch_migration),
        
        # Remove old branch field from Manager
        migrations.RemoveField(
            model_name='manager',
            name='branch',
        ),
        
        # Rename new_branch to branch
        migrations.RenameField(
            model_name='manager',
            old_name='new_branch',
            new_name='branch',
        ),
        
        # Remove temporary field
        migrations.RemoveField(
            model_name='manager',
            name='temp_branch_name',
        ),
    ]
